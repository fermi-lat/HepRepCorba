// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:151

#ifndef _TAO_IDL_HEPREPC_H_
#define _TAO_IDL_HEPREPC_H_


#include "tao/corba.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

#if defined (TAO_EXPORT_NESTED_CLASSES)
#  if defined (TAO_EXPORT_NESTED_MACRO)
#    undef TAO_EXPORT_NESTED_MACRO
#  endif /* defined (TAO_EXPORT_NESTED_MACRO) */
#  define TAO_EXPORT_NESTED_MACRO 
#endif /* TAO_EXPORT_NESTED_CLASSES */

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */

#if !defined (_STRINGARRAY_CH_)
#define _STRINGARRAY_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class StringArray;
class StringArray_var;

// *************************************************************
// StringArray
// *************************************************************

class  StringArray : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
TAO_Unbounded_String_Sequence
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_String_Sequence

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  StringArray (void);
  StringArray (CORBA::ULong max);
  StringArray (
      CORBA::ULong max, 
      CORBA::ULong length, 
      char * *buffer, 
      CORBA::Boolean release = 0
    );
  StringArray (const StringArray &);
  ~StringArray (void);
  
  static void _tao_any_destructor (void*);
  
  typedef StringArray_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_STRINGARRAY___VAR_CH_)
#define _STRINGARRAY___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class StringArray_var
// *************************************************************

class  StringArray_var
{
public:
  StringArray_var (void);
  StringArray_var (StringArray *);
  StringArray_var (const StringArray_var &);
  ~StringArray_var (void);
  
  StringArray_var &operator= (StringArray *);
  StringArray_var &operator= (const StringArray_var &);
  StringArray *operator-> (void);
  const StringArray *operator-> (void) const;
  
  operator const StringArray &() const;
  operator StringArray &();
  operator StringArray &() const;
  
  // Variable-size base types only.
  operator StringArray *&();
  
  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);
  
  // in, inout, out, _retn 
  const StringArray &in (void) const;
  StringArray &inout (void);
  StringArray *&out (void);
  StringArray *_retn (void);
  StringArray *ptr (void) const;

private:
  StringArray *ptr_;
};

#endif /* end #if !defined */

#if !defined (_STRINGARRAY___OUT_CH_)
#define _STRINGARRAY___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  StringArray_out
{
public:
  StringArray_out (StringArray *&);
  StringArray_out (StringArray_var &);
  StringArray_out (const StringArray_out &);
  StringArray_out &operator= (const StringArray_out &);
  StringArray_out &operator= (StringArray *);
  operator StringArray *&();
  StringArray *&ptr (void);
  StringArray *operator-> (void);
  TAO_SeqElem_String_Manager operator[] (CORBA::ULong index);

private:
  StringArray *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const StringArray_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_StringArray;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepAttDef_var;

struct  HepRepAttDef
{
  typedef HepRepAttDef_var _var_type;
  
  static void _tao_any_destructor (void *);
  TAO_String_Manager name;
  TAO_String_Manager desc;
  TAO_String_Manager category;
  TAO_String_Manager extra;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepAttDef_var
{
public:
  HepRepAttDef_var (void);
  HepRepAttDef_var (HepRepAttDef *);
  HepRepAttDef_var (const HepRepAttDef_var &);
  ~HepRepAttDef_var (void);
  
  HepRepAttDef_var &operator= (HepRepAttDef *);
  HepRepAttDef_var &operator= (const HepRepAttDef_var &);
  HepRepAttDef *operator-> (void);
  const HepRepAttDef *operator-> (void) const;
  
  operator const HepRepAttDef &() const;
  operator HepRepAttDef &();
  operator HepRepAttDef &() const;
  
  // Variable-size types only.
  operator HepRepAttDef *&();
  
  // in, inout, out, _retn 
  const HepRepAttDef &in (void) const;
  HepRepAttDef &inout (void);
  HepRepAttDef *&out (void);
  HepRepAttDef *_retn (void);
  HepRepAttDef *ptr (void) const;

private:
  HepRepAttDef *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepAttDef_out
{
public:
  HepRepAttDef_out (HepRepAttDef *&);
  HepRepAttDef_out (HepRepAttDef_var &);
  HepRepAttDef_out (const HepRepAttDef_out &);
  HepRepAttDef_out &operator= (const HepRepAttDef_out &);
  HepRepAttDef_out &operator= (HepRepAttDef *);
  operator HepRepAttDef *&();
  HepRepAttDef *&ptr (void);
  HepRepAttDef *operator-> (void);
  
private:
  HepRepAttDef *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepAttDef_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepAttDef;

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPATTDEFLIST_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPATTDEFLIST_CH_

class  _TAO_Unbounded_Sequence_HepRepAttDefList
  : public TAO_Unbounded_Base_Sequence
{
public:
  _TAO_Unbounded_Sequence_HepRepAttDefList (void);
  _TAO_Unbounded_Sequence_HepRepAttDefList (CORBA::ULong maximum); 
  _TAO_Unbounded_Sequence_HepRepAttDefList (
      CORBA::ULong maximum,
      CORBA::ULong length,
      HepRepAttDef *data,
      CORBA::Boolean release = 0
    );
  _TAO_Unbounded_Sequence_HepRepAttDefList (
      const _TAO_Unbounded_Sequence_HepRepAttDefList &rhs
    );
  _TAO_Unbounded_Sequence_HepRepAttDefList &operator= (
      const _TAO_Unbounded_Sequence_HepRepAttDefList &rhs
    );
  virtual ~_TAO_Unbounded_Sequence_HepRepAttDefList (void);
  
  // = Accessors.
  HepRepAttDef &operator[] (CORBA::ULong i);
  const HepRepAttDef &operator[] (CORBA::ULong i) const;
  
  // = Static operations.
  static HepRepAttDef *allocbuf (CORBA::ULong size);
  static void freebuf (HepRepAttDef *buffer);
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  virtual void _allocate_buffer (CORBA::ULong length);
  virtual void _deallocate_buffer (void);
  HepRepAttDef *get_buffer (CORBA::Boolean orphan = 0);
  const HepRepAttDef *get_buffer (void) const;
  void replace (
      CORBA::ULong max,
      CORBA::ULong length,
      HepRepAttDef *data,
      CORBA::Boolean release
    );
};

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPATTDEFLIST_CH_)
#define _HEPREPATTDEFLIST_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class HepRepAttDefList;
class HepRepAttDefList_var;

// *************************************************************
// HepRepAttDefList
// *************************************************************

class  HepRepAttDefList : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_HepRepAttDefList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<HepRepAttDef>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  HepRepAttDefList (void);
  HepRepAttDefList (CORBA::ULong max);
  HepRepAttDefList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      HepRepAttDef *buffer, 
      CORBA::Boolean release = 0
    );
  HepRepAttDefList (const HepRepAttDefList &);
  ~HepRepAttDefList (void);
  
  static void _tao_any_destructor (void*);
  
  typedef HepRepAttDefList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_HEPREPATTDEFLIST___VAR_CH_)
#define _HEPREPATTDEFLIST___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class HepRepAttDefList_var
// *************************************************************

class  HepRepAttDefList_var
{
public:
  HepRepAttDefList_var (void);
  HepRepAttDefList_var (HepRepAttDefList *);
  HepRepAttDefList_var (const HepRepAttDefList_var &);
  ~HepRepAttDefList_var (void);
  
  HepRepAttDefList_var &operator= (HepRepAttDefList *);
  HepRepAttDefList_var &operator= (const HepRepAttDefList_var &);
  HepRepAttDefList *operator-> (void);
  const HepRepAttDefList *operator-> (void) const;
  
  operator const HepRepAttDefList &() const;
  operator HepRepAttDefList &();
  operator HepRepAttDefList &() const;
  
  // Variable-size base types only.
  operator HepRepAttDefList *&();
  
  HepRepAttDef & operator[] (CORBA::ULong index);
  const HepRepAttDef & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const HepRepAttDefList &in (void) const;
  HepRepAttDefList &inout (void);
  HepRepAttDefList *&out (void);
  HepRepAttDefList *_retn (void);
  HepRepAttDefList *ptr (void) const;

private:
  HepRepAttDefList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_HEPREPATTDEFLIST___OUT_CH_)
#define _HEPREPATTDEFLIST___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  HepRepAttDefList_out
{
public:
  HepRepAttDefList_out (HepRepAttDefList *&);
  HepRepAttDefList_out (HepRepAttDefList_var &);
  HepRepAttDefList_out (const HepRepAttDefList_out &);
  HepRepAttDefList_out &operator= (const HepRepAttDefList_out &);
  HepRepAttDefList_out &operator= (HepRepAttDefList *);
  operator HepRepAttDefList *&();
  HepRepAttDefList *&ptr (void);
  HepRepAttDefList *operator-> (void);
  HepRepAttDef & operator[] (CORBA::ULong index);

private:
  HepRepAttDefList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepAttDefList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepAttDefList;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepAttValue_var;

struct  HepRepAttValue
{
  typedef HepRepAttValue_var _var_type;
  
  static void _tao_any_destructor (void *);
  TAO_String_Manager name;
  CORBA::Any value;
  CORBA::Long showLabel;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepAttValue_var
{
public:
  HepRepAttValue_var (void);
  HepRepAttValue_var (HepRepAttValue *);
  HepRepAttValue_var (const HepRepAttValue_var &);
  ~HepRepAttValue_var (void);
  
  HepRepAttValue_var &operator= (HepRepAttValue *);
  HepRepAttValue_var &operator= (const HepRepAttValue_var &);
  HepRepAttValue *operator-> (void);
  const HepRepAttValue *operator-> (void) const;
  
  operator const HepRepAttValue &() const;
  operator HepRepAttValue &();
  operator HepRepAttValue &() const;
  
  // Variable-size types only.
  operator HepRepAttValue *&();
  
  // in, inout, out, _retn 
  const HepRepAttValue &in (void) const;
  HepRepAttValue &inout (void);
  HepRepAttValue *&out (void);
  HepRepAttValue *_retn (void);
  HepRepAttValue *ptr (void) const;

private:
  HepRepAttValue *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepAttValue_out
{
public:
  HepRepAttValue_out (HepRepAttValue *&);
  HepRepAttValue_out (HepRepAttValue_var &);
  HepRepAttValue_out (const HepRepAttValue_out &);
  HepRepAttValue_out &operator= (const HepRepAttValue_out &);
  HepRepAttValue_out &operator= (HepRepAttValue *);
  operator HepRepAttValue *&();
  HepRepAttValue *&ptr (void);
  HepRepAttValue *operator-> (void);
  
private:
  HepRepAttValue *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepAttValue_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepAttValue;

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPATTVALUELIST_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPATTVALUELIST_CH_

class  _TAO_Unbounded_Sequence_HepRepAttValueList
  : public TAO_Unbounded_Base_Sequence
{
public:
  _TAO_Unbounded_Sequence_HepRepAttValueList (void);
  _TAO_Unbounded_Sequence_HepRepAttValueList (CORBA::ULong maximum); 
  _TAO_Unbounded_Sequence_HepRepAttValueList (
      CORBA::ULong maximum,
      CORBA::ULong length,
      HepRepAttValue *data,
      CORBA::Boolean release = 0
    );
  _TAO_Unbounded_Sequence_HepRepAttValueList (
      const _TAO_Unbounded_Sequence_HepRepAttValueList &rhs
    );
  _TAO_Unbounded_Sequence_HepRepAttValueList &operator= (
      const _TAO_Unbounded_Sequence_HepRepAttValueList &rhs
    );
  virtual ~_TAO_Unbounded_Sequence_HepRepAttValueList (void);
  
  // = Accessors.
  HepRepAttValue &operator[] (CORBA::ULong i);
  const HepRepAttValue &operator[] (CORBA::ULong i) const;
  
  // = Static operations.
  static HepRepAttValue *allocbuf (CORBA::ULong size);
  static void freebuf (HepRepAttValue *buffer);
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  virtual void _allocate_buffer (CORBA::ULong length);
  virtual void _deallocate_buffer (void);
  HepRepAttValue *get_buffer (CORBA::Boolean orphan = 0);
  const HepRepAttValue *get_buffer (void) const;
  void replace (
      CORBA::ULong max,
      CORBA::ULong length,
      HepRepAttValue *data,
      CORBA::Boolean release
    );
};

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPATTVALUELIST_CH_)
#define _HEPREPATTVALUELIST_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class HepRepAttValueList;
class HepRepAttValueList_var;

// *************************************************************
// HepRepAttValueList
// *************************************************************

class  HepRepAttValueList : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_HepRepAttValueList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<HepRepAttValue>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  HepRepAttValueList (void);
  HepRepAttValueList (CORBA::ULong max);
  HepRepAttValueList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      HepRepAttValue *buffer, 
      CORBA::Boolean release = 0
    );
  HepRepAttValueList (const HepRepAttValueList &);
  ~HepRepAttValueList (void);
  
  static void _tao_any_destructor (void*);
  
  typedef HepRepAttValueList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_HEPREPATTVALUELIST___VAR_CH_)
#define _HEPREPATTVALUELIST___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class HepRepAttValueList_var
// *************************************************************

class  HepRepAttValueList_var
{
public:
  HepRepAttValueList_var (void);
  HepRepAttValueList_var (HepRepAttValueList *);
  HepRepAttValueList_var (const HepRepAttValueList_var &);
  ~HepRepAttValueList_var (void);
  
  HepRepAttValueList_var &operator= (HepRepAttValueList *);
  HepRepAttValueList_var &operator= (const HepRepAttValueList_var &);
  HepRepAttValueList *operator-> (void);
  const HepRepAttValueList *operator-> (void) const;
  
  operator const HepRepAttValueList &() const;
  operator HepRepAttValueList &();
  operator HepRepAttValueList &() const;
  
  // Variable-size base types only.
  operator HepRepAttValueList *&();
  
  HepRepAttValue & operator[] (CORBA::ULong index);
  const HepRepAttValue & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const HepRepAttValueList &in (void) const;
  HepRepAttValueList &inout (void);
  HepRepAttValueList *&out (void);
  HepRepAttValueList *_retn (void);
  HepRepAttValueList *ptr (void) const;

private:
  HepRepAttValueList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_HEPREPATTVALUELIST___OUT_CH_)
#define _HEPREPATTVALUELIST___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  HepRepAttValueList_out
{
public:
  HepRepAttValueList_out (HepRepAttValueList *&);
  HepRepAttValueList_out (HepRepAttValueList_var &);
  HepRepAttValueList_out (const HepRepAttValueList_out &);
  HepRepAttValueList_out &operator= (const HepRepAttValueList_out &);
  HepRepAttValueList_out &operator= (HepRepAttValueList *);
  operator HepRepAttValueList *&();
  HepRepAttValueList *&ptr (void);
  HepRepAttValueList *operator-> (void);
  HepRepAttValue & operator[] (CORBA::ULong index);

private:
  HepRepAttValueList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepAttValueList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepAttValueList;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepPoint_var;

struct  HepRepPoint
{
  typedef HepRepPoint_var _var_type;
  
  static void _tao_any_destructor (void *);
  CORBA::Double x;
  CORBA::Double y;
  CORBA::Double z;
  HepRepAttValueList attValues;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepPoint_var
{
public:
  HepRepPoint_var (void);
  HepRepPoint_var (HepRepPoint *);
  HepRepPoint_var (const HepRepPoint_var &);
  ~HepRepPoint_var (void);
  
  HepRepPoint_var &operator= (HepRepPoint *);
  HepRepPoint_var &operator= (const HepRepPoint_var &);
  HepRepPoint *operator-> (void);
  const HepRepPoint *operator-> (void) const;
  
  operator const HepRepPoint &() const;
  operator HepRepPoint &();
  operator HepRepPoint &() const;
  
  // Variable-size types only.
  operator HepRepPoint *&();
  
  // in, inout, out, _retn 
  const HepRepPoint &in (void) const;
  HepRepPoint &inout (void);
  HepRepPoint *&out (void);
  HepRepPoint *_retn (void);
  HepRepPoint *ptr (void) const;

private:
  HepRepPoint *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepPoint_out
{
public:
  HepRepPoint_out (HepRepPoint *&);
  HepRepPoint_out (HepRepPoint_var &);
  HepRepPoint_out (const HepRepPoint_out &);
  HepRepPoint_out &operator= (const HepRepPoint_out &);
  HepRepPoint_out &operator= (HepRepPoint *);
  operator HepRepPoint *&();
  HepRepPoint *&ptr (void);
  HepRepPoint *operator-> (void);
  
private:
  HepRepPoint *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepPoint_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepPoint;

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPPOINTLIST_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPPOINTLIST_CH_

class  _TAO_Unbounded_Sequence_HepRepPointList
  : public TAO_Unbounded_Base_Sequence
{
public:
  _TAO_Unbounded_Sequence_HepRepPointList (void);
  _TAO_Unbounded_Sequence_HepRepPointList (CORBA::ULong maximum); 
  _TAO_Unbounded_Sequence_HepRepPointList (
      CORBA::ULong maximum,
      CORBA::ULong length,
      HepRepPoint *data,
      CORBA::Boolean release = 0
    );
  _TAO_Unbounded_Sequence_HepRepPointList (
      const _TAO_Unbounded_Sequence_HepRepPointList &rhs
    );
  _TAO_Unbounded_Sequence_HepRepPointList &operator= (
      const _TAO_Unbounded_Sequence_HepRepPointList &rhs
    );
  virtual ~_TAO_Unbounded_Sequence_HepRepPointList (void);
  
  // = Accessors.
  HepRepPoint &operator[] (CORBA::ULong i);
  const HepRepPoint &operator[] (CORBA::ULong i) const;
  
  // = Static operations.
  static HepRepPoint *allocbuf (CORBA::ULong size);
  static void freebuf (HepRepPoint *buffer);
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  virtual void _allocate_buffer (CORBA::ULong length);
  virtual void _deallocate_buffer (void);
  HepRepPoint *get_buffer (CORBA::Boolean orphan = 0);
  const HepRepPoint *get_buffer (void) const;
  void replace (
      CORBA::ULong max,
      CORBA::ULong length,
      HepRepPoint *data,
      CORBA::Boolean release
    );
};

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPPOINTLIST_CH_)
#define _HEPREPPOINTLIST_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class HepRepPointList;
class HepRepPointList_var;

// *************************************************************
// HepRepPointList
// *************************************************************

class  HepRepPointList : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_HepRepPointList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<HepRepPoint>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  HepRepPointList (void);
  HepRepPointList (CORBA::ULong max);
  HepRepPointList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      HepRepPoint *buffer, 
      CORBA::Boolean release = 0
    );
  HepRepPointList (const HepRepPointList &);
  ~HepRepPointList (void);
  
  static void _tao_any_destructor (void*);
  
  typedef HepRepPointList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_HEPREPPOINTLIST___VAR_CH_)
#define _HEPREPPOINTLIST___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class HepRepPointList_var
// *************************************************************

class  HepRepPointList_var
{
public:
  HepRepPointList_var (void);
  HepRepPointList_var (HepRepPointList *);
  HepRepPointList_var (const HepRepPointList_var &);
  ~HepRepPointList_var (void);
  
  HepRepPointList_var &operator= (HepRepPointList *);
  HepRepPointList_var &operator= (const HepRepPointList_var &);
  HepRepPointList *operator-> (void);
  const HepRepPointList *operator-> (void) const;
  
  operator const HepRepPointList &() const;
  operator HepRepPointList &();
  operator HepRepPointList &() const;
  
  // Variable-size base types only.
  operator HepRepPointList *&();
  
  HepRepPoint & operator[] (CORBA::ULong index);
  const HepRepPoint & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const HepRepPointList &in (void) const;
  HepRepPointList &inout (void);
  HepRepPointList *&out (void);
  HepRepPointList *_retn (void);
  HepRepPointList *ptr (void) const;

private:
  HepRepPointList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_HEPREPPOINTLIST___OUT_CH_)
#define _HEPREPPOINTLIST___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  HepRepPointList_out
{
public:
  HepRepPointList_out (HepRepPointList *&);
  HepRepPointList_out (HepRepPointList_var &);
  HepRepPointList_out (const HepRepPointList_out &);
  HepRepPointList_out &operator= (const HepRepPointList_out &);
  HepRepPointList_out &operator= (HepRepPointList *);
  operator HepRepPointList *&();
  HepRepPointList *&ptr (void);
  HepRepPointList *operator-> (void);
  HepRepPoint & operator[] (CORBA::ULong index);

private:
  HepRepPointList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepPointList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepPointList;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepInstance_var;

struct  HepRepInstance
{
  typedef HepRepInstance_var _var_type;
  
  static void _tao_any_destructor (void *);
  TAO_String_Manager typeName;
  
  
  // TAO_IDL - Generated from 
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPINSTANCE__TAO_SEQ_HEPREPINSTANCE_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPINSTANCE__TAO_SEQ_HEPREPINSTANCE_CH_
  
  class  _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance
    : public TAO_Unbounded_Base_Sequence
  {
  public:
    _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance (void);
    _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance (CORBA::ULong maximum); 
    _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance (
        CORBA::ULong maximum,
        CORBA::ULong length,
        HepRepInstance *data,
        CORBA::Boolean release = 0
      );
    _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance (
        const _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance &rhs
      );
    _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance &operator= (
        const _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance &rhs
      );
    virtual ~_TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance (void);
    
    // = Accessors.
    HepRepInstance &operator[] (CORBA::ULong i);
    const HepRepInstance &operator[] (CORBA::ULong i) const;
    
    // = Static operations.
    static HepRepInstance *allocbuf (CORBA::ULong size);
    static void freebuf (HepRepInstance *buffer);
    
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    HepRepInstance *get_buffer (CORBA::Boolean orphan = 0);
    const HepRepInstance *get_buffer (void) const;
    void replace (
        CORBA::ULong max,
        CORBA::ULong length,
        HepRepInstance *data,
        CORBA::Boolean release
      );
  };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPINSTANCE__TAO_SEQ_HEPREPINSTANCE_CH_)
#define _HEPREPINSTANCE__TAO_SEQ_HEPREPINSTANCE_CH_
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371
  
  class _tao_seq_HepRepInstance;
  
  // *************************************************************
  // HepRepInstance::_tao_seq_HepRepInstance
  // *************************************************************
  
  class  _tao_seq_HepRepInstance : public 
  
  // TAO_IDL - Generated from 
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_HepRepInstance__tao_seq_HepRepInstance
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<HepRepInstance>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    _tao_seq_HepRepInstance (void);
    _tao_seq_HepRepInstance (CORBA::ULong max);
    _tao_seq_HepRepInstance (
        CORBA::ULong max, 
        CORBA::ULong length, 
        HepRepInstance *buffer, 
        CORBA::Boolean release = 0
      );
    _tao_seq_HepRepInstance (const _tao_seq_HepRepInstance &);
    ~_tao_seq_HepRepInstance (void);
    
    static void _tao_any_destructor (void*);
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_field/field_ch.cpp:447
  
  typedef _tao_seq_HepRepInstance _instances_seq;
  _tao_seq_HepRepInstance instances;
  HepRepPointList points;
  HepRepAttValueList attValues;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepInstance_var
{
public:
  HepRepInstance_var (void);
  HepRepInstance_var (HepRepInstance *);
  HepRepInstance_var (const HepRepInstance_var &);
  ~HepRepInstance_var (void);
  
  HepRepInstance_var &operator= (HepRepInstance *);
  HepRepInstance_var &operator= (const HepRepInstance_var &);
  HepRepInstance *operator-> (void);
  const HepRepInstance *operator-> (void) const;
  
  operator const HepRepInstance &() const;
  operator HepRepInstance &();
  operator HepRepInstance &() const;
  
  // Variable-size types only.
  operator HepRepInstance *&();
  
  // in, inout, out, _retn 
  const HepRepInstance &in (void) const;
  HepRepInstance &inout (void);
  HepRepInstance *&out (void);
  HepRepInstance *_retn (void);
  HepRepInstance *ptr (void) const;

private:
  HepRepInstance *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepInstance_out
{
public:
  HepRepInstance_out (HepRepInstance *&);
  HepRepInstance_out (HepRepInstance_var &);
  HepRepInstance_out (const HepRepInstance_out &);
  HepRepInstance_out &operator= (const HepRepInstance_out &);
  HepRepInstance_out &operator= (HepRepInstance *);
  operator HepRepInstance *&();
  HepRepInstance *&ptr (void);
  HepRepInstance *operator-> (void);
  
private:
  HepRepInstance *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepInstance_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepInstance;

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPINSTANCELIST_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPINSTANCELIST_CH_

class  _TAO_Unbounded_Sequence_HepRepInstanceList
  : public TAO_Unbounded_Base_Sequence
{
public:
  _TAO_Unbounded_Sequence_HepRepInstanceList (void);
  _TAO_Unbounded_Sequence_HepRepInstanceList (CORBA::ULong maximum); 
  _TAO_Unbounded_Sequence_HepRepInstanceList (
      CORBA::ULong maximum,
      CORBA::ULong length,
      HepRepInstance *data,
      CORBA::Boolean release = 0
    );
  _TAO_Unbounded_Sequence_HepRepInstanceList (
      const _TAO_Unbounded_Sequence_HepRepInstanceList &rhs
    );
  _TAO_Unbounded_Sequence_HepRepInstanceList &operator= (
      const _TAO_Unbounded_Sequence_HepRepInstanceList &rhs
    );
  virtual ~_TAO_Unbounded_Sequence_HepRepInstanceList (void);
  
  // = Accessors.
  HepRepInstance &operator[] (CORBA::ULong i);
  const HepRepInstance &operator[] (CORBA::ULong i) const;
  
  // = Static operations.
  static HepRepInstance *allocbuf (CORBA::ULong size);
  static void freebuf (HepRepInstance *buffer);
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  virtual void _allocate_buffer (CORBA::ULong length);
  virtual void _deallocate_buffer (void);
  HepRepInstance *get_buffer (CORBA::Boolean orphan = 0);
  const HepRepInstance *get_buffer (void) const;
  void replace (
      CORBA::ULong max,
      CORBA::ULong length,
      HepRepInstance *data,
      CORBA::Boolean release
    );
};

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPINSTANCELIST_CH_)
#define _HEPREPINSTANCELIST_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class HepRepInstanceList;
class HepRepInstanceList_var;

// *************************************************************
// HepRepInstanceList
// *************************************************************

class  HepRepInstanceList : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_HepRepInstanceList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<HepRepInstance>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  HepRepInstanceList (void);
  HepRepInstanceList (CORBA::ULong max);
  HepRepInstanceList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      HepRepInstance *buffer, 
      CORBA::Boolean release = 0
    );
  HepRepInstanceList (const HepRepInstanceList &);
  ~HepRepInstanceList (void);
  
  static void _tao_any_destructor (void*);
  
  typedef HepRepInstanceList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_HEPREPINSTANCELIST___VAR_CH_)
#define _HEPREPINSTANCELIST___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class HepRepInstanceList_var
// *************************************************************

class  HepRepInstanceList_var
{
public:
  HepRepInstanceList_var (void);
  HepRepInstanceList_var (HepRepInstanceList *);
  HepRepInstanceList_var (const HepRepInstanceList_var &);
  ~HepRepInstanceList_var (void);
  
  HepRepInstanceList_var &operator= (HepRepInstanceList *);
  HepRepInstanceList_var &operator= (const HepRepInstanceList_var &);
  HepRepInstanceList *operator-> (void);
  const HepRepInstanceList *operator-> (void) const;
  
  operator const HepRepInstanceList &() const;
  operator HepRepInstanceList &();
  operator HepRepInstanceList &() const;
  
  // Variable-size base types only.
  operator HepRepInstanceList *&();
  
  HepRepInstance & operator[] (CORBA::ULong index);
  const HepRepInstance & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const HepRepInstanceList &in (void) const;
  HepRepInstanceList &inout (void);
  HepRepInstanceList *&out (void);
  HepRepInstanceList *_retn (void);
  HepRepInstanceList *ptr (void) const;

private:
  HepRepInstanceList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_HEPREPINSTANCELIST___OUT_CH_)
#define _HEPREPINSTANCELIST___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  HepRepInstanceList_out
{
public:
  HepRepInstanceList_out (HepRepInstanceList *&);
  HepRepInstanceList_out (HepRepInstanceList_var &);
  HepRepInstanceList_out (const HepRepInstanceList_out &);
  HepRepInstanceList_out &operator= (const HepRepInstanceList_out &);
  HepRepInstanceList_out &operator= (HepRepInstanceList *);
  operator HepRepInstanceList *&();
  HepRepInstanceList *&ptr (void);
  HepRepInstanceList *operator-> (void);
  HepRepInstance & operator[] (CORBA::ULong index);

private:
  HepRepInstanceList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepInstanceList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepInstanceList;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepTreeID_var;

struct  HepRepTreeID
{
  typedef HepRepTreeID_var _var_type;
  
  static void _tao_any_destructor (void *);
  TAO_String_Manager name;
  TAO_String_Manager version;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepTreeID_var
{
public:
  HepRepTreeID_var (void);
  HepRepTreeID_var (HepRepTreeID *);
  HepRepTreeID_var (const HepRepTreeID_var &);
  ~HepRepTreeID_var (void);
  
  HepRepTreeID_var &operator= (HepRepTreeID *);
  HepRepTreeID_var &operator= (const HepRepTreeID_var &);
  HepRepTreeID *operator-> (void);
  const HepRepTreeID *operator-> (void) const;
  
  operator const HepRepTreeID &() const;
  operator HepRepTreeID &();
  operator HepRepTreeID &() const;
  
  // Variable-size types only.
  operator HepRepTreeID *&();
  
  // in, inout, out, _retn 
  const HepRepTreeID &in (void) const;
  HepRepTreeID &inout (void);
  HepRepTreeID *&out (void);
  HepRepTreeID *_retn (void);
  HepRepTreeID *ptr (void) const;

private:
  HepRepTreeID *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepTreeID_out
{
public:
  HepRepTreeID_out (HepRepTreeID *&);
  HepRepTreeID_out (HepRepTreeID_var &);
  HepRepTreeID_out (const HepRepTreeID_out &);
  HepRepTreeID_out &operator= (const HepRepTreeID_out &);
  HepRepTreeID_out &operator= (HepRepTreeID *);
  operator HepRepTreeID *&();
  HepRepTreeID *&ptr (void);
  HepRepTreeID *operator-> (void);
  
private:
  HepRepTreeID *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepTreeID_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepTreeID;

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPTREEIDLIST_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPTREEIDLIST_CH_

class  _TAO_Unbounded_Sequence_HepRepTreeIDList
  : public TAO_Unbounded_Base_Sequence
{
public:
  _TAO_Unbounded_Sequence_HepRepTreeIDList (void);
  _TAO_Unbounded_Sequence_HepRepTreeIDList (CORBA::ULong maximum); 
  _TAO_Unbounded_Sequence_HepRepTreeIDList (
      CORBA::ULong maximum,
      CORBA::ULong length,
      HepRepTreeID *data,
      CORBA::Boolean release = 0
    );
  _TAO_Unbounded_Sequence_HepRepTreeIDList (
      const _TAO_Unbounded_Sequence_HepRepTreeIDList &rhs
    );
  _TAO_Unbounded_Sequence_HepRepTreeIDList &operator= (
      const _TAO_Unbounded_Sequence_HepRepTreeIDList &rhs
    );
  virtual ~_TAO_Unbounded_Sequence_HepRepTreeIDList (void);
  
  // = Accessors.
  HepRepTreeID &operator[] (CORBA::ULong i);
  const HepRepTreeID &operator[] (CORBA::ULong i) const;
  
  // = Static operations.
  static HepRepTreeID *allocbuf (CORBA::ULong size);
  static void freebuf (HepRepTreeID *buffer);
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  virtual void _allocate_buffer (CORBA::ULong length);
  virtual void _deallocate_buffer (void);
  HepRepTreeID *get_buffer (CORBA::Boolean orphan = 0);
  const HepRepTreeID *get_buffer (void) const;
  void replace (
      CORBA::ULong max,
      CORBA::ULong length,
      HepRepTreeID *data,
      CORBA::Boolean release
    );
};

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPTREEIDLIST_CH_)
#define _HEPREPTREEIDLIST_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class HepRepTreeIDList;
class HepRepTreeIDList_var;

// *************************************************************
// HepRepTreeIDList
// *************************************************************

class  HepRepTreeIDList : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_HepRepTreeIDList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<HepRepTreeID>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  HepRepTreeIDList (void);
  HepRepTreeIDList (CORBA::ULong max);
  HepRepTreeIDList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      HepRepTreeID *buffer, 
      CORBA::Boolean release = 0
    );
  HepRepTreeIDList (const HepRepTreeIDList &);
  ~HepRepTreeIDList (void);
  
  static void _tao_any_destructor (void*);
  
  typedef HepRepTreeIDList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_HEPREPTREEIDLIST___VAR_CH_)
#define _HEPREPTREEIDLIST___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class HepRepTreeIDList_var
// *************************************************************

class  HepRepTreeIDList_var
{
public:
  HepRepTreeIDList_var (void);
  HepRepTreeIDList_var (HepRepTreeIDList *);
  HepRepTreeIDList_var (const HepRepTreeIDList_var &);
  ~HepRepTreeIDList_var (void);
  
  HepRepTreeIDList_var &operator= (HepRepTreeIDList *);
  HepRepTreeIDList_var &operator= (const HepRepTreeIDList_var &);
  HepRepTreeIDList *operator-> (void);
  const HepRepTreeIDList *operator-> (void) const;
  
  operator const HepRepTreeIDList &() const;
  operator HepRepTreeIDList &();
  operator HepRepTreeIDList &() const;
  
  // Variable-size base types only.
  operator HepRepTreeIDList *&();
  
  HepRepTreeID & operator[] (CORBA::ULong index);
  const HepRepTreeID & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const HepRepTreeIDList &in (void) const;
  HepRepTreeIDList &inout (void);
  HepRepTreeIDList *&out (void);
  HepRepTreeIDList *_retn (void);
  HepRepTreeIDList *ptr (void) const;

private:
  HepRepTreeIDList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_HEPREPTREEIDLIST___OUT_CH_)
#define _HEPREPTREEIDLIST___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  HepRepTreeIDList_out
{
public:
  HepRepTreeIDList_out (HepRepTreeIDList *&);
  HepRepTreeIDList_out (HepRepTreeIDList_var &);
  HepRepTreeIDList_out (const HepRepTreeIDList_out &);
  HepRepTreeIDList_out &operator= (const HepRepTreeIDList_out &);
  HepRepTreeIDList_out &operator= (HepRepTreeIDList *);
  operator HepRepTreeIDList *&();
  HepRepTreeIDList *&ptr (void);
  HepRepTreeIDList *operator-> (void);
  HepRepTreeID & operator[] (CORBA::ULong index);

private:
  HepRepTreeIDList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepTreeIDList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepTreeIDList;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepInstanceTree_var;

struct  HepRepInstanceTree
{
  typedef HepRepInstanceTree_var _var_type;
  
  static void _tao_any_destructor (void *);
  HepRepTreeID id;
  HepRepTreeID typeTreeID;
  HepRepTreeIDList instanceTreeIDs;
  HepRepInstanceList instances;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepInstanceTree_var
{
public:
  HepRepInstanceTree_var (void);
  HepRepInstanceTree_var (HepRepInstanceTree *);
  HepRepInstanceTree_var (const HepRepInstanceTree_var &);
  ~HepRepInstanceTree_var (void);
  
  HepRepInstanceTree_var &operator= (HepRepInstanceTree *);
  HepRepInstanceTree_var &operator= (const HepRepInstanceTree_var &);
  HepRepInstanceTree *operator-> (void);
  const HepRepInstanceTree *operator-> (void) const;
  
  operator const HepRepInstanceTree &() const;
  operator HepRepInstanceTree &();
  operator HepRepInstanceTree &() const;
  
  // Variable-size types only.
  operator HepRepInstanceTree *&();
  
  // in, inout, out, _retn 
  const HepRepInstanceTree &in (void) const;
  HepRepInstanceTree &inout (void);
  HepRepInstanceTree *&out (void);
  HepRepInstanceTree *_retn (void);
  HepRepInstanceTree *ptr (void) const;

private:
  HepRepInstanceTree *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepInstanceTree_out
{
public:
  HepRepInstanceTree_out (HepRepInstanceTree *&);
  HepRepInstanceTree_out (HepRepInstanceTree_var &);
  HepRepInstanceTree_out (const HepRepInstanceTree_out &);
  HepRepInstanceTree_out &operator= (const HepRepInstanceTree_out &);
  HepRepInstanceTree_out &operator= (HepRepInstanceTree *);
  operator HepRepInstanceTree *&();
  HepRepInstanceTree *&ptr (void);
  HepRepInstanceTree *operator-> (void);
  
private:
  HepRepInstanceTree *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepInstanceTree_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepInstanceTree;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepType_var;

struct  HepRepType
{
  typedef HepRepType_var _var_type;
  
  static void _tao_any_destructor (void *);
  TAO_String_Manager name;
  TAO_String_Manager desc;
  TAO_String_Manager infoURL;
  
  
  // TAO_IDL - Generated from 
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPTYPE__TAO_SEQ_HEPREPTYPE_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPTYPE__TAO_SEQ_HEPREPTYPE_CH_
  
  class  _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType
    : public TAO_Unbounded_Base_Sequence
  {
  public:
    _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType (void);
    _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType (CORBA::ULong maximum); 
    _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType (
        CORBA::ULong maximum,
        CORBA::ULong length,
        HepRepType *data,
        CORBA::Boolean release = 0
      );
    _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType (
        const _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType &rhs
      );
    _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType &operator= (
        const _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType &rhs
      );
    virtual ~_TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType (void);
    
    // = Accessors.
    HepRepType &operator[] (CORBA::ULong i);
    const HepRepType &operator[] (CORBA::ULong i) const;
    
    // = Static operations.
    static HepRepType *allocbuf (CORBA::ULong size);
    static void freebuf (HepRepType *buffer);
    
    // Implement the TAO_Base_Sequence methods (see Sequence.h)
    virtual void _allocate_buffer (CORBA::ULong length);
    virtual void _deallocate_buffer (void);
    HepRepType *get_buffer (CORBA::Boolean orphan = 0);
    const HepRepType *get_buffer (void) const;
    void replace (
        CORBA::ULong max,
        CORBA::ULong length,
        HepRepType *data,
        CORBA::Boolean release
      );
  };

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPTYPE__TAO_SEQ_HEPREPTYPE_CH_)
#define _HEPREPTYPE__TAO_SEQ_HEPREPTYPE_CH_
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371
  
  class _tao_seq_HepRepType;
  
  // *************************************************************
  // HepRepType::_tao_seq_HepRepType
  // *************************************************************
  
  class  _tao_seq_HepRepType : public 
  
  // TAO_IDL - Generated from 
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
  _TAO_Unbounded_Sequence_HepRepType__tao_seq_HepRepType
#else /* TAO_USE_SEQUENCE_TEMPLATES */
  TAO_Unbounded_Sequence<HepRepType>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
  {
  public:
    _tao_seq_HepRepType (void);
    _tao_seq_HepRepType (CORBA::ULong max);
    _tao_seq_HepRepType (
        CORBA::ULong max, 
        CORBA::ULong length, 
        HepRepType *buffer, 
        CORBA::Boolean release = 0
      );
    _tao_seq_HepRepType (const _tao_seq_HepRepType &);
    ~_tao_seq_HepRepType (void);
    
    static void _tao_any_destructor (void*);
    
    
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_field/field_ch.cpp:447
  
  typedef _tao_seq_HepRepType _types_seq;
  _tao_seq_HepRepType types;
  HepRepAttDefList attDefs;
  HepRepAttValueList attValues;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepType_var
{
public:
  HepRepType_var (void);
  HepRepType_var (HepRepType *);
  HepRepType_var (const HepRepType_var &);
  ~HepRepType_var (void);
  
  HepRepType_var &operator= (HepRepType *);
  HepRepType_var &operator= (const HepRepType_var &);
  HepRepType *operator-> (void);
  const HepRepType *operator-> (void) const;
  
  operator const HepRepType &() const;
  operator HepRepType &();
  operator HepRepType &() const;
  
  // Variable-size types only.
  operator HepRepType *&();
  
  // in, inout, out, _retn 
  const HepRepType &in (void) const;
  HepRepType &inout (void);
  HepRepType *&out (void);
  HepRepType *_retn (void);
  HepRepType *ptr (void) const;

private:
  HepRepType *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepType_out
{
public:
  HepRepType_out (HepRepType *&);
  HepRepType_out (HepRepType_var &);
  HepRepType_out (const HepRepType_out &);
  HepRepType_out &operator= (const HepRepType_out &);
  HepRepType_out &operator= (HepRepType *);
  operator HepRepType *&();
  HepRepType *&ptr (void);
  HepRepType *operator-> (void);
  
private:
  HepRepType *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepType_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepType;

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPTYPELIST_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPTYPELIST_CH_

class  _TAO_Unbounded_Sequence_HepRepTypeList
  : public TAO_Unbounded_Base_Sequence
{
public:
  _TAO_Unbounded_Sequence_HepRepTypeList (void);
  _TAO_Unbounded_Sequence_HepRepTypeList (CORBA::ULong maximum); 
  _TAO_Unbounded_Sequence_HepRepTypeList (
      CORBA::ULong maximum,
      CORBA::ULong length,
      HepRepType *data,
      CORBA::Boolean release = 0
    );
  _TAO_Unbounded_Sequence_HepRepTypeList (
      const _TAO_Unbounded_Sequence_HepRepTypeList &rhs
    );
  _TAO_Unbounded_Sequence_HepRepTypeList &operator= (
      const _TAO_Unbounded_Sequence_HepRepTypeList &rhs
    );
  virtual ~_TAO_Unbounded_Sequence_HepRepTypeList (void);
  
  // = Accessors.
  HepRepType &operator[] (CORBA::ULong i);
  const HepRepType &operator[] (CORBA::ULong i) const;
  
  // = Static operations.
  static HepRepType *allocbuf (CORBA::ULong size);
  static void freebuf (HepRepType *buffer);
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  virtual void _allocate_buffer (CORBA::ULong length);
  virtual void _deallocate_buffer (void);
  HepRepType *get_buffer (CORBA::Boolean orphan = 0);
  const HepRepType *get_buffer (void) const;
  void replace (
      CORBA::ULong max,
      CORBA::ULong length,
      HepRepType *data,
      CORBA::Boolean release
    );
};

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPTYPELIST_CH_)
#define _HEPREPTYPELIST_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class HepRepTypeList;
class HepRepTypeList_var;

// *************************************************************
// HepRepTypeList
// *************************************************************

class  HepRepTypeList : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_HepRepTypeList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<HepRepType>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  HepRepTypeList (void);
  HepRepTypeList (CORBA::ULong max);
  HepRepTypeList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      HepRepType *buffer, 
      CORBA::Boolean release = 0
    );
  HepRepTypeList (const HepRepTypeList &);
  ~HepRepTypeList (void);
  
  static void _tao_any_destructor (void*);
  
  typedef HepRepTypeList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_HEPREPTYPELIST___VAR_CH_)
#define _HEPREPTYPELIST___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class HepRepTypeList_var
// *************************************************************

class  HepRepTypeList_var
{
public:
  HepRepTypeList_var (void);
  HepRepTypeList_var (HepRepTypeList *);
  HepRepTypeList_var (const HepRepTypeList_var &);
  ~HepRepTypeList_var (void);
  
  HepRepTypeList_var &operator= (HepRepTypeList *);
  HepRepTypeList_var &operator= (const HepRepTypeList_var &);
  HepRepTypeList *operator-> (void);
  const HepRepTypeList *operator-> (void) const;
  
  operator const HepRepTypeList &() const;
  operator HepRepTypeList &();
  operator HepRepTypeList &() const;
  
  // Variable-size base types only.
  operator HepRepTypeList *&();
  
  HepRepType & operator[] (CORBA::ULong index);
  const HepRepType & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const HepRepTypeList &in (void) const;
  HepRepTypeList &inout (void);
  HepRepTypeList *&out (void);
  HepRepTypeList *_retn (void);
  HepRepTypeList *ptr (void) const;

private:
  HepRepTypeList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_HEPREPTYPELIST___OUT_CH_)
#define _HEPREPTYPELIST___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  HepRepTypeList_out
{
public:
  HepRepTypeList_out (HepRepTypeList *&);
  HepRepTypeList_out (HepRepTypeList_var &);
  HepRepTypeList_out (const HepRepTypeList_out &);
  HepRepTypeList_out &operator= (const HepRepTypeList_out &);
  HepRepTypeList_out &operator= (HepRepTypeList *);
  operator HepRepTypeList *&();
  HepRepTypeList *&ptr (void);
  HepRepTypeList *operator-> (void);
  HepRepType & operator[] (CORBA::ULong index);

private:
  HepRepTypeList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepTypeList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepTypeList;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepTypeTree_var;

struct  HepRepTypeTree
{
  typedef HepRepTypeTree_var _var_type;
  
  static void _tao_any_destructor (void *);
  HepRepTreeID id;
  HepRepTypeList types;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepTypeTree_var
{
public:
  HepRepTypeTree_var (void);
  HepRepTypeTree_var (HepRepTypeTree *);
  HepRepTypeTree_var (const HepRepTypeTree_var &);
  ~HepRepTypeTree_var (void);
  
  HepRepTypeTree_var &operator= (HepRepTypeTree *);
  HepRepTypeTree_var &operator= (const HepRepTypeTree_var &);
  HepRepTypeTree *operator-> (void);
  const HepRepTypeTree *operator-> (void) const;
  
  operator const HepRepTypeTree &() const;
  operator HepRepTypeTree &();
  operator HepRepTypeTree &() const;
  
  // Variable-size types only.
  operator HepRepTypeTree *&();
  
  // in, inout, out, _retn 
  const HepRepTypeTree &in (void) const;
  HepRepTypeTree &inout (void);
  HepRepTypeTree *&out (void);
  HepRepTypeTree *_retn (void);
  HepRepTypeTree *ptr (void) const;

private:
  HepRepTypeTree *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepTypeTree_out
{
public:
  HepRepTypeTree_out (HepRepTypeTree *&);
  HepRepTypeTree_out (HepRepTypeTree_var &);
  HepRepTypeTree_out (const HepRepTypeTree_out &);
  HepRepTypeTree_out &operator= (const HepRepTypeTree_out &);
  HepRepTypeTree_out &operator= (HepRepTypeTree *);
  operator HepRepTypeTree *&();
  HepRepTypeTree *&ptr (void);
  HepRepTypeTree *operator-> (void);
  
private:
  HepRepTypeTree *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepTypeTree_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepTypeTree;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_ch.cpp:49

class HepRepAction_var;

struct  HepRepAction
{
  typedef HepRepAction_var _var_type;
  
  static void _tao_any_destructor (void *);
  TAO_String_Manager name;
  TAO_String_Manager expression;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:71

class  HepRepAction_var
{
public:
  HepRepAction_var (void);
  HepRepAction_var (HepRepAction *);
  HepRepAction_var (const HepRepAction_var &);
  ~HepRepAction_var (void);
  
  HepRepAction_var &operator= (HepRepAction *);
  HepRepAction_var &operator= (const HepRepAction_var &);
  HepRepAction *operator-> (void);
  const HepRepAction *operator-> (void) const;
  
  operator const HepRepAction &() const;
  operator HepRepAction &();
  operator HepRepAction &() const;
  
  // Variable-size types only.
  operator HepRepAction *&();
  
  // in, inout, out, _retn 
  const HepRepAction &in (void) const;
  HepRepAction &inout (void);
  HepRepAction *&out (void);
  HepRepAction *_retn (void);
  HepRepAction *ptr (void) const;

private:
  HepRepAction *ptr_;
};

// TAO_IDL - Generated from
// be\be_structure.cpp:445

class  HepRepAction_out
{
public:
  HepRepAction_out (HepRepAction *&);
  HepRepAction_out (HepRepAction_var &);
  HepRepAction_out (const HepRepAction_out &);
  HepRepAction_out &operator= (const HepRepAction_out &);
  HepRepAction_out &operator= (HepRepAction *);
  operator HepRepAction *&();
  HepRepAction *&ptr (void);
  HepRepAction *operator-> (void);
  
private:
  HepRepAction *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepAction_var &);
};

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepAction;

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/gen_unbounded_sequence_ch.cpp:65

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_HEPREPACTIONLIST_CH_)
#define __TAO_UNBOUNDED_SEQUENCE_HEPREPACTIONLIST_CH_

class  _TAO_Unbounded_Sequence_HepRepActionList
  : public TAO_Unbounded_Base_Sequence
{
public:
  _TAO_Unbounded_Sequence_HepRepActionList (void);
  _TAO_Unbounded_Sequence_HepRepActionList (CORBA::ULong maximum); 
  _TAO_Unbounded_Sequence_HepRepActionList (
      CORBA::ULong maximum,
      CORBA::ULong length,
      HepRepAction *data,
      CORBA::Boolean release = 0
    );
  _TAO_Unbounded_Sequence_HepRepActionList (
      const _TAO_Unbounded_Sequence_HepRepActionList &rhs
    );
  _TAO_Unbounded_Sequence_HepRepActionList &operator= (
      const _TAO_Unbounded_Sequence_HepRepActionList &rhs
    );
  virtual ~_TAO_Unbounded_Sequence_HepRepActionList (void);
  
  // = Accessors.
  HepRepAction &operator[] (CORBA::ULong i);
  const HepRepAction &operator[] (CORBA::ULong i) const;
  
  // = Static operations.
  static HepRepAction *allocbuf (CORBA::ULong size);
  static void freebuf (HepRepAction *buffer);
  
  // Implement the TAO_Base_Sequence methods (see Sequence.h)
  virtual void _allocate_buffer (CORBA::ULong length);
  virtual void _deallocate_buffer (void);
  HepRepAction *get_buffer (CORBA::Boolean orphan = 0);
  const HepRepAction *get_buffer (void) const;
  void replace (
      CORBA::ULong max,
      CORBA::ULong length,
      HepRepAction *data,
      CORBA::Boolean release
    );
};

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_HEPREPACTIONLIST_CH_)
#define _HEPREPACTIONLIST_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:371

class HepRepActionList;
class HepRepActionList_var;

// *************************************************************
// HepRepActionList
// *************************************************************

class  HepRepActionList : public 

// TAO_IDL - Generated from 
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:51

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)
_TAO_Unbounded_Sequence_HepRepActionList
#else /* TAO_USE_SEQUENCE_TEMPLATES */
TAO_Unbounded_Sequence<HepRepAction>

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 
{
public:
  HepRepActionList (void);
  HepRepActionList (CORBA::ULong max);
  HepRepActionList (
      CORBA::ULong max, 
      CORBA::ULong length, 
      HepRepAction *buffer, 
      CORBA::Boolean release = 0
    );
  HepRepActionList (const HepRepActionList &);
  ~HepRepActionList (void);
  
  static void _tao_any_destructor (void*);
  
  typedef HepRepActionList_var _var_type;
};

#endif /* end #if !defined */

#if !defined (_HEPREPACTIONLIST___VAR_CH_)
#define _HEPREPACTIONLIST___VAR_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:549

// *************************************************************
// class HepRepActionList_var
// *************************************************************

class  HepRepActionList_var
{
public:
  HepRepActionList_var (void);
  HepRepActionList_var (HepRepActionList *);
  HepRepActionList_var (const HepRepActionList_var &);
  ~HepRepActionList_var (void);
  
  HepRepActionList_var &operator= (HepRepActionList *);
  HepRepActionList_var &operator= (const HepRepActionList_var &);
  HepRepActionList *operator-> (void);
  const HepRepActionList *operator-> (void) const;
  
  operator const HepRepActionList &() const;
  operator HepRepActionList &();
  operator HepRepActionList &() const;
  
  // Variable-size base types only.
  operator HepRepActionList *&();
  
  HepRepAction & operator[] (CORBA::ULong index);
  const HepRepAction & operator[] (CORBA::ULong index) const;
  
  // in, inout, out, _retn 
  const HepRepActionList &in (void) const;
  HepRepActionList &inout (void);
  HepRepActionList *&out (void);
  HepRepActionList *_retn (void);
  HepRepActionList *ptr (void) const;

private:
  HepRepActionList *ptr_;
};

#endif /* end #if !defined */

#if !defined (_HEPREPACTIONLIST___OUT_CH_)
#define _HEPREPACTIONLIST___OUT_CH_

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_ch.cpp:753

class  HepRepActionList_out
{
public:
  HepRepActionList_out (HepRepActionList *&);
  HepRepActionList_out (HepRepActionList_var &);
  HepRepActionList_out (const HepRepActionList_out &);
  HepRepActionList_out &operator= (const HepRepActionList_out &);
  HepRepActionList_out &operator= (HepRepActionList *);
  operator HepRepActionList *&();
  HepRepActionList *&ptr (void);
  HepRepActionList *operator-> (void);
  HepRepAction & operator[] (CORBA::ULong index);

private:
  HepRepActionList *&ptr_;
  // Assignment from T_var not allowed.
  void operator= (const HepRepActionList_var &);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRepActionList;

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:52

#if !defined (_HEPREP___PTR_CH_)
#define _HEPREP___PTR_CH_

class HepRep;
typedef HepRep *HepRep_ptr;

#endif /* end #if !defined */

#if !defined (_HEPREP___VAR_CH_)
#define _HEPREP___VAR_CH_

// TAO_IDL - Generated from
// be\be_interface.cpp:565

class  HepRep_var : public TAO_Base_var
{
public:
  HepRep_var (void); // default constructor
  HepRep_var (HepRep_ptr p) : ptr_ (p) {} 
  HepRep_var (const HepRep_var &); // copy constructor
  ~HepRep_var (void); // destructor
  
  HepRep_var &operator= (HepRep_ptr);
  HepRep_var &operator= (const HepRep_var &);
  HepRep_ptr operator-> (void) const;
  
  operator const HepRep_ptr &() const;
  operator HepRep_ptr &();
  // in, inout, out, _retn 
  HepRep_ptr in (void) const;
  HepRep_ptr &inout (void);
  HepRep_ptr &out (void);
  HepRep_ptr _retn (void);
  HepRep_ptr ptr (void) const;
  
  // Hooks used by template sequence and object manager classes
  // for non-defined forward declared interfaces.
  static HepRep_ptr tao_duplicate (HepRep_ptr);
  static void tao_release (HepRep_ptr);
  static HepRep_ptr tao_nil (void);
  static HepRep_ptr tao_narrow (
      CORBA::Object *
      ACE_ENV_ARG_DECL_NOT_USED
    );
  static CORBA::Object * tao_upcast (void *);

private:
  HepRep_ptr ptr_;
  // Unimplemented - prevents widening assignment.
  HepRep_var (const TAO_Base_var &rhs);
  HepRep_var &operator= (const TAO_Base_var &rhs);
};

#endif /* end #if !defined */

#if !defined (_HEPREP___OUT_CH_)
#define _HEPREP___OUT_CH_

// TAO_IDL - Generated from
// be\be_interface.cpp:940

class  HepRep_out
{
public:
  HepRep_out (HepRep_ptr &);
  HepRep_out (HepRep_var &);
  HepRep_out (const HepRep_out &);
  HepRep_out &operator= (const HepRep_out &);
  HepRep_out &operator= (const HepRep_var &);
  HepRep_out &operator= (HepRep_ptr);
  operator HepRep_ptr &();
  HepRep_ptr &ptr (void);
  HepRep_ptr operator-> (void);

private:
  HepRep_ptr &ptr_;
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:110

#if !defined (_HEPREP_CH_)
#define _HEPREP_CH_

class _TAO_HepRep_Proxy_Impl;
class _TAO_HepRep_Remote_Proxy_Impl;
class _TAO_HepRep_Proxy_Broker;
class _TAO_HepRep_Remote_Proxy_Broker;

class  HepRep
  : public virtual CORBA::Object
{
public:
  typedef HepRep_ptr _ptr_type;
  typedef HepRep_var _var_type;
  static int _tao_class_id;
  
  // The static operations.
  static HepRep_ptr _duplicate (HepRep_ptr obj);
  
  static HepRep_ptr _narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  static HepRep_ptr _unchecked_narrow (
      CORBA::Object_ptr obj
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  static HepRep_ptr _nil (void)
    {
      return (HepRep_ptr)0;
    }
  
  static void _tao_any_destructor (void *);
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
  
  virtual ::HepRepInstanceTree * getInstanceTreeTop (
      const char * instanceTreeName,
      const char * instanceTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
  
  virtual ::HepRepTypeTree * getTypeTree (
      const char * typeTreeName,
      const char * typeTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
  
  virtual ::HepRepInstanceTree * getInstances (
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
  
  virtual ::HepRepInstanceTree * getInstancesAfterAction (
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames,
      const HepRepActionList & actions,
      CORBA::Boolean getPoints,
      CORBA::Boolean getDrawAtts,
      CORBA::Boolean getNonDrawAtts,
      const StringArray & invertAtts
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
  
  virtual ::StringArray * getLayerOrder (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_ch.cpp:46
  
  virtual char * checkForException (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_ch.cpp:267
  
  virtual CORBA::Boolean _is_a (
      const char *type_id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual void *_tao_QueryInterface (ptr_arith_t type);
  
  virtual const char* _interface_repository_id (void) const;
private:
  _TAO_HepRep_Proxy_Broker *the_TAO_HepRep_Proxy_Broker_;

protected:
  HepRep (int collocated = 0);
  
  // These methods travese the inheritance tree and set the
  // parents piece of the given class in the right mode.
  virtual void HepRep_setup_collocation (int collocated);
  
  HepRep (
      TAO_Stub *objref, 
      CORBA::Boolean _tao_collocated = 0,
      TAO_Abstract_ServantBase *servant = 0
    );
  virtual ~HepRep (void);
  
  friend class _TAO_HepRep_Remote_Proxy_Impl;
  friend class _TAO_HepRep_ThruPOA_Proxy_Impl;
  friend class _TAO_HepRep_Direct_Proxy_Impl;

private:
  HepRep (const HepRep &);
  void operator= (const HepRep &);
};

// The Proxy Implementations are used by each interface to
// perform a call. Each different implementation encapsulates
// an invocation logic.


///////////////////////////////////////////////////////////////////////
//                    Base Proxy Impl. Declaration
//

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/base_proxy_impl_ch.cpp:35

class  _TAO_HepRep_Proxy_Impl
  : public virtual TAO_Object_Proxy_Impl
{
public:
  virtual ~_TAO_HepRep_Proxy_Impl (void) {}
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
  
  virtual ::HepRepInstanceTree * getInstanceTreeTop (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
  
  virtual ::HepRepTypeTree * getTypeTree (
      CORBA_Object *_collocated_tao_target_,
      const char * typeTreeName,
      const char * typeTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
  
  virtual ::HepRepInstanceTree * getInstances (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
  
  virtual ::HepRepInstanceTree * getInstancesAfterAction (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames,
      const HepRepActionList & actions,
      CORBA::Boolean getPoints,
      CORBA::Boolean getDrawAtts,
      CORBA::Boolean getNonDrawAtts,
      const StringArray & invertAtts
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
  
  virtual ::StringArray * getLayerOrder (
      CORBA_Object *_collocated_tao_target_
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/base_proxy_impl_ch.cpp:24
  
  virtual char * checkForException (
      CORBA_Object *_collocated_tao_target_
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;

protected:
  _TAO_HepRep_Proxy_Impl (void);
};

//
//               End Base Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                Remote Proxy Impl. Declaration
//

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/remote_proxy_impl_ch.cpp:37

class  _TAO_HepRep_Remote_Proxy_Impl
  : public virtual _TAO_HepRep_Proxy_Impl,
    public virtual TAO_Remote_Object_Proxy_Impl
{
public:
  _TAO_HepRep_Remote_Proxy_Impl (void);
  
  virtual ~_TAO_HepRep_Remote_Proxy_Impl (void) {}
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepInstanceTree * getInstanceTreeTop (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepTypeTree * getTypeTree (
      CORBA_Object *_collocated_tao_target_,
      const char * typeTreeName,
      const char * typeTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepInstanceTree * getInstances (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepInstanceTree * getInstancesAfterAction (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames,
      const HepRepActionList & actions,
      CORBA::Boolean getPoints,
      CORBA::Boolean getDrawAtts,
      CORBA::Boolean getNonDrawAtts,
      const StringArray & invertAtts
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::StringArray * getLayerOrder (
      CORBA_Object *_collocated_tao_target_
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual char * checkForException (
      CORBA_Object *_collocated_tao_target_
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
};

//
//             End Remote Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////

// The Proxy Brokers are used by each interface to get
// the right proxy for performing a call. In the new 
// collocation scheme, the proxy to be used can vary on
// a call by call basis.

///////////////////////////////////////////////////////////////////////
//                 Base Proxy Broker Declaration 
//

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/base_proxy_broker_ch.cpp:35

class  _TAO_HepRep_Proxy_Broker
{
public:
  virtual ~_TAO_HepRep_Proxy_Broker (void);
  virtual _TAO_HepRep_Proxy_Impl &select_proxy (
      HepRep *object
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    ) = 0;
  
protected:
  _TAO_HepRep_Proxy_Broker (void);
  
};

//
//              End Base Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                 Remote Proxy Broker Declaration 
//

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/remote_proxy_broker_ch.cpp:40

class  _TAO_HepRep_Remote_Proxy_Broker
  : public virtual _TAO_HepRep_Proxy_Broker
{
public: 
  _TAO_HepRep_Remote_Proxy_Broker (void);
  
  virtual ~_TAO_HepRep_Remote_Proxy_Broker (void);
  
  virtual _TAO_HepRep_Proxy_Impl &select_proxy (
      HepRep *object
      ACE_ENV_ARG_DECL
    );
  
private:
  _TAO_HepRep_Remote_Proxy_Impl remote_proxy_impl_;

public:
  // This member function is used to get an handle to the unique instance
  // of the Remote Proxy Broker that is available for a given
  // interface.
  static _TAO_HepRep_Remote_Proxy_Broker *the_TAO_HepRep_Remote_Proxy_Broker (void);
};

//
//              End Remote Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_decl.cpp:44

extern  ::CORBA::TypeCode_ptr  _tc_HepRep;

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_root/root.cpp:80

extern 
_TAO_HepRep_Proxy_Broker *
(*_TAO_HepRep_Proxy_Broker_Factory_function_pointer) (
    CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const StringArray &); // copying version
 void operator<<= (CORBA::Any &, StringArray*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, StringArray *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const StringArray *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepAttDef &); // copying version
 void operator<<= (CORBA::Any &, HepRepAttDef*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepAttDef *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepAttDef *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepAttDefList &); // copying version
 void operator<<= (CORBA::Any &, HepRepAttDefList*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepAttDefList *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepAttDefList *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepAttValue &); // copying version
 void operator<<= (CORBA::Any &, HepRepAttValue*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepAttValue *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepAttValue *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepAttValueList &); // copying version
 void operator<<= (CORBA::Any &, HepRepAttValueList*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepAttValueList *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepAttValueList *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepPoint &); // copying version
 void operator<<= (CORBA::Any &, HepRepPoint*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepPoint *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepPoint *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepPointList &); // copying version
 void operator<<= (CORBA::Any &, HepRepPointList*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepPointList *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepPointList *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepInstance &); // copying version
 void operator<<= (CORBA::Any &, HepRepInstance*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepInstance *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepInstance *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepInstanceList &); // copying version
 void operator<<= (CORBA::Any &, HepRepInstanceList*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepInstanceList *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepInstanceList *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepTreeID &); // copying version
 void operator<<= (CORBA::Any &, HepRepTreeID*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepTreeID *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepTreeID *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepTreeIDList &); // copying version
 void operator<<= (CORBA::Any &, HepRepTreeIDList*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepTreeIDList *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepTreeIDList *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepInstanceTree &); // copying version
 void operator<<= (CORBA::Any &, HepRepInstanceTree*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepInstanceTree *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepInstanceTree *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepType &); // copying version
 void operator<<= (CORBA::Any &, HepRepType*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepType *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepType *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepTypeList &); // copying version
 void operator<<= (CORBA::Any &, HepRepTypeList*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepTypeList *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepTypeList *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepTypeTree &); // copying version
 void operator<<= (CORBA::Any &, HepRepTypeTree*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepTypeTree *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepTypeTree *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepAction &); // copying version
 void operator<<= (CORBA::Any &, HepRepAction*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepAction *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepAction *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, const HepRepActionList &); // copying version
 void operator<<= (CORBA::Any &, HepRepActionList*); // noncopying version
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRepActionList *&); // deprecated
 CORBA::Boolean operator>>= (const CORBA::Any &, const HepRepActionList *&);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_ch.cpp:52

 void operator<<= (CORBA::Any &, HepRep_ptr); // copying
 void operator<<= (CORBA::Any &, HepRep_ptr *); // non-copying
 CORBA::Boolean operator>>= (const CORBA::Any &, HepRep_ptr &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_root/cdr_op.cpp:48

#ifndef __ACE_INLINE__

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_StringArray_H_
#define _TAO_CDR_OP_StringArray_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const StringArray &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    StringArray &
  );

#endif /* _TAO_CDR_OP_StringArray_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepAttDef &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepAttDef &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepAttDefList_H_
#define _TAO_CDR_OP_HepRepAttDefList_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepAttDefList &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepAttDefList &
  );

#endif /* _TAO_CDR_OP_HepRepAttDefList_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepAttValue &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepAttValue &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepAttValueList_H_
#define _TAO_CDR_OP_HepRepAttValueList_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepAttValueList &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepAttValueList &
  );

#endif /* _TAO_CDR_OP_HepRepAttValueList_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepPoint &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepPoint &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepPointList_H_
#define _TAO_CDR_OP_HepRepPointList_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepPointList &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepPointList &
  );

#endif /* _TAO_CDR_OP_HepRepPointList_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepInstance &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepInstance &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepInstance__tao_seq_HepRepInstance_H_
#define _TAO_CDR_OP_HepRepInstance__tao_seq_HepRepInstance_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepInstance::_tao_seq_HepRepInstance &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepInstance::_tao_seq_HepRepInstance &
  );

#endif /* _TAO_CDR_OP_HepRepInstance__tao_seq_HepRepInstance_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepInstanceList_H_
#define _TAO_CDR_OP_HepRepInstanceList_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepInstanceList &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepInstanceList &
  );

#endif /* _TAO_CDR_OP_HepRepInstanceList_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepTreeID &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepTreeID &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepTreeIDList_H_
#define _TAO_CDR_OP_HepRepTreeIDList_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepTreeIDList &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepTreeIDList &
  );

#endif /* _TAO_CDR_OP_HepRepTreeIDList_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepInstanceTree &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepInstanceTree &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepType &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepType &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepType__tao_seq_HepRepType_H_
#define _TAO_CDR_OP_HepRepType__tao_seq_HepRepType_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepType::_tao_seq_HepRepType &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepType::_tao_seq_HepRepType &
  );

#endif /* _TAO_CDR_OP_HepRepType__tao_seq_HepRepType_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepTypeList_H_
#define _TAO_CDR_OP_HepRepTypeList_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepTypeList &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepTypeList &
  );

#endif /* _TAO_CDR_OP_HepRepTypeList_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepTypeTree &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepTypeTree &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_ch.cpp:54

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRepAction &);
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRepAction &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_ch.cpp:57

#if !defined _TAO_CDR_OP_HepRepActionList_H_
#define _TAO_CDR_OP_HepRepActionList_H_

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const HepRepActionList &
  );
 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    HepRepActionList &
  );

#endif /* _TAO_CDR_OP_HepRepActionList_H_ */

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_ch.cpp:55

 CORBA::Boolean operator<< (TAO_OutputCDR &, const HepRep_ptr );
 CORBA::Boolean operator>> (TAO_InputCDR &, HepRep_ptr &);

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_root/cdr_op.cpp:64

#endif /* __ACE_INLINE__ */

// TAO_IDL - Generated from
// be\be_codegen.cpp:1016

#if defined (__ACE_INLINE__)
#include "HepRepC.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#endif /* ifndef */

