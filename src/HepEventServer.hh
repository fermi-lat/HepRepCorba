// This file is generated by omniidl (C++ backend)- omniORB_4_0. Do not edit.
#ifndef __HepEventServer_hh__
#define __HepEventServer_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_HepEventServer
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_HepEventServer
#endif



#ifndef __HepRep_hh_EXTERNAL_GUARD__
#define __HepRep_hh_EXTERNAL_GUARD__
#include "HepRep.hh"
#endif


#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __HepEventServer__
#define __HepEventServer__

class HepEventServer;
class _objref_HepEventServer;
class _impl_HepEventServer;

typedef _objref_HepEventServer* HepEventServer_ptr;
typedef HepEventServer_ptr HepEventServerRef;

class HepEventServer_Helper {
public:
  typedef HepEventServer_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_HepEventServer, HepEventServer_Helper> HepEventServer_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_HepEventServer,HepEventServer_Helper > HepEventServer_out;

#endif

class HepEventServer {
public:
  // Declarations for this interface type.
  typedef HepEventServer_ptr _ptr_type;
  typedef HepEventServer_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(CORBA::Object_ptr);
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  
};

class _objref_HepEventServer :
  public virtual CORBA::Object, public virtual omniObjRef
{
public:
  char* attach(const char* clientDesc);
  void release();
  char* setEvent(const char* eventID);
  CORBA::Long getNumberOfEvents();
  char* getEventTitle();
  HepRep_ptr getEventData(const char* dataFormat);

  inline _objref_HepEventServer()  { _PR_setobj(0); }  // nil
  _objref_HepEventServer(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_HepEventServer();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_HepEventServer(const _objref_HepEventServer&);
  _objref_HepEventServer& operator = (const _objref_HepEventServer&);
  // not implemented
};

class _pof_HepEventServer : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_HepEventServer() : _OMNI_NS(proxyObjectFactory)(HepEventServer::_PD_repoId) {}
  virtual ~_pof_HepEventServer();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_HepEventServer :
  public virtual omniServant
{
public:
  virtual ~_impl_HepEventServer();

  virtual char* attach(const char* clientDesc) = 0;
  virtual void release() = 0;
  virtual char* setEvent(const char* eventID) = 0;
  virtual CORBA::Long getNumberOfEvents() = 0;
  virtual char* getEventTitle() = 0;
  virtual HepRep_ptr getEventData(const char* dataFormat) = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
};




class POA_HepEventServer :
  public virtual _impl_HepEventServer,
  public virtual PortableServer::ServantBase
{
public:
  virtual ~POA_HepEventServer();

  inline HepEventServer_ptr _this() {
    return (HepEventServer_ptr) _do_this(HepEventServer::_PD_repoId);
  }
};





#undef _core_attr
#undef _dyn_attr



inline void
HepEventServer::_marshalObjRef(::HepEventServer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_HepEventServer
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_HepEventServer
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_HepEventServer
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_HepEventServer
#endif

#endif  // __HepEventServer_hh__

