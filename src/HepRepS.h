// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// be\be_codegen.cpp:450

#ifndef _TAO_IDL_HEPREPS_H_
#define _TAO_IDL_HEPREPS_H_


#include "HepRepC.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"
#include "tao/PortableServer/Collocated_Object.h"
#include "tao/PortableServer/ThruPOA_Object_Proxy_Impl.h"
#include "tao/PortableServer/Direct_Object_Proxy_Impl.h"

#if defined(_MSC_VER)
#if (_MSC_VER >= 1200)
#pragma warning(push)
#endif /* _MSC_VER >= 1200 */
#pragma warning(disable:4250)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option push -w-rvl -w-rch -w-ccc -w-inl
#endif /* __BORLANDC__ */// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_sh.cpp:86

class POA_HepRep;
typedef POA_HepRep *POA_HepRep_ptr;

class _TAO_HepRep_ThruPOA_Proxy_Impl;
class _TAO_HepRep_Strategized_Proxy_Broker;

class  POA_HepRep
  : public virtual PortableServer::ServantBase
{
protected:
  POA_HepRep (void);

public:
  POA_HepRep (const POA_HepRep& rhs);
  virtual ~POA_HepRep (void);
  
  virtual CORBA::Boolean _is_a (
      const char* logical_type_id
      ACE_ENV_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual void* _downcast (
      const char* logical_type_id
    );
  
  static void _is_a_skel (
      TAO_ServerRequest &req,
      void *servant,
      void *servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  static void _non_existent_skel (
      TAO_ServerRequest &req,
      void *servant,
      void *servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  static void _interface_skel (
      TAO_ServerRequest &req,
      void *servant,
      void *servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  static void _component_skel (
      TAO_ServerRequest &req,
      void *obj,
      void *servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  virtual void _dispatch (
      TAO_ServerRequest &req,
      void *_servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  ::HepRep *_this (
      ACE_ENV_SINGLE_ARG_DECL_WITH_DEFAULTS
    );
  
  virtual const char* _interface_repository_id (void) const;
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::HepRepInstanceTree * getInstanceTreeTop (
      const char * instanceTreeName,
      const char * instanceTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  static void getInstanceTreeTop_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_servant,
      void *_tao_servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::HepRepTypeTree * getTypeTree (
      const char * typeTreeName,
      const char * typeTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  static void getTypeTree_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_servant,
      void *_tao_servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::HepRepInstanceTree * getInstances (
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  static void getInstances_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_servant,
      void *_tao_servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::HepRepInstanceTree * getInstancesAfterAction (
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames,
      const HepRepActionList & actions,
      CORBA::Boolean getPoints,
      CORBA::Boolean getDrawAtts,
      CORBA::Boolean getNonDrawAtts,
      const StringArray & invertAtts
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  static void getInstancesAfterAction_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_servant,
      void *_tao_servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual ::StringArray * getLayerOrder (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  static void getLayerOrder_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_servant,
      void *_tao_servant_upcall
      ACE_ENV_ARG_DECL
    );
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_sh.cpp:45
  
  virtual char * checkForException (
      
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    )) = 0;
  
  static void checkForException_skel (
      TAO_ServerRequest &_tao_req,
      void *_tao_servant,
      void *_tao_servant_upcall
      ACE_ENV_ARG_DECL
    );
};

///////////////////////////////////////////////////////////////////////
//               Strategized Proxy Broker Declaration 
//

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/strategized_proxy_broker_sh.cpp:39

class  _TAO_HepRep_Strategized_Proxy_Broker : public virtual ::_TAO_HepRep_Proxy_Broker
{
public: 
  _TAO_HepRep_Strategized_Proxy_Broker (void);
  
  virtual ~_TAO_HepRep_Strategized_Proxy_Broker (void);
  
  virtual ::_TAO_HepRep_Proxy_Impl &select_proxy (
    ::HepRep *object
    ACE_ENV_ARG_DECL
  );

private:
  // Helper methods that takes care to create the proxy
  // as soon as their use is necessary.
  void create_proxy (
    int collocation_strategy
    ACE_ENV_ARG_DECL
  );
  
  // Caches the proxy implementations. The proxy implementation
  // are totally stateless, and those can be shared by all the
  // instances of a given IDL interface type.
  ::_TAO_HepRep_Proxy_Impl
  *proxy_cache_[TAO_Collocation_Strategies::CS_LAST];
  
  TAO_SYNCH_MUTEX mutex_;
  // This funxtion is used to get an handle to the unique instance
  // of the Strategized Proxy Broker that is available for a given
  // interface.

public:
  static _TAO_HepRep_Strategized_Proxy_Broker *the_TAO_HepRep_Strategized_Proxy_Broker (void);
};

//
//            End Strategized Proxy Broker Declaration 
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
//                    ThruPOA  Impl. Declaration
//

// TAO_IDL - Generated from
// e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_interface/thru_poa_proxy_impl_sh.cpp:37

class  _TAO_HepRep_ThruPOA_Proxy_Impl : 
  public virtual ::_TAO_HepRep_Proxy_Impl,
  public virtual TAO_ThruPOA_Object_Proxy_Impl
{
public:
  _TAO_HepRep_ThruPOA_Proxy_Impl (void);
  
  virtual ~_TAO_HepRep_ThruPOA_Proxy_Impl (void) {}
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepInstanceTree * getInstanceTreeTop (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepTypeTree * getTypeTree (
      CORBA_Object *_collocated_tao_target_,
      const char * typeTreeName,
      const char * typeTreeVersion
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepInstanceTree * getInstances (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::HepRepInstanceTree * getInstancesAfterAction (
      CORBA_Object *_collocated_tao_target_,
      const char * instanceTreeName,
      const char * instanceTreeVersion,
      const StringArray & typeNames,
      const HepRepActionList & actions,
      CORBA::Boolean getPoints,
      CORBA::Boolean getDrawAtts,
      CORBA::Boolean getNonDrawAtts,
      const StringArray & invertAtts
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual ::StringArray * getLayerOrder (
      CORBA_Object *_collocated_tao_target_
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
  
  // TAO_IDL - Generated from
  // e:\ric\ace_wrappers\tao\tao_idl\be\be_visitor_operation/proxy_impl_xh.cpp:24
  
  virtual char * checkForException (
      CORBA_Object *_collocated_tao_target_
    )
    ACE_THROW_SPEC ((
      CORBA::SystemException
    ));
};

//
//                ThruPOA  Proxy Impl. Declaration
///////////////////////////////////////////////////////////////////////

// TAO_IDL - Generated from 
// be\be_codegen.cpp:1051


#if defined (__ACE_INLINE__)
#include "HepRepS.i"
#endif /* defined INLINE */

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
#pragma warning(pop)
#endif /* _MSC_VER */

#if defined (__BORLANDC__)
#pragma option pop
#endif /* __BORLANDC__ */

#endif /* ifndef */
